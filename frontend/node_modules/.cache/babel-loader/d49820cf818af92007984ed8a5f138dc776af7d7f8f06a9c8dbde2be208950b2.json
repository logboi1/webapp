{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = \"http://localhost:5000/api/v1\"; // Replace with your API base URL\n\nconst userApi = {\n  register: async formData => {\n    try {\n      const response = await axios.post(`${BASE_URL}/students/register`, formData);\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new Error(error.response.data.error || \"Registration failed\");\n      } else if (error.request) {\n        throw new Error(\"Network error occurred. Please try again.\");\n      } else {\n        throw new Error(\"Error occurred. Please try again.\");\n      }\n    }\n  },\n  login: async credentials => {\n    try {\n      const response = await axios.post(`${BASE_URL}/students/login`, credentials);\n      console.log(\"credentials:\", credentials);\n      const {\n        student,\n        token\n      } = response.data;\n      localStorage.setItem(\"token\", token);\n      console.debug(token);\n      return student; // Return the student details\n    } catch (error) {\n      throw new Error(error.response.data.error || \"Login failed\");\n    }\n  },\n  getProfile: async () => {\n    try {\n      const response = await axios.get(`${BASE_URL}/students/me`);\n      return response.data; // Return the response data\n    } catch (error) {\n      throw new Error(error.response.data.message || \"Error fetching student profile\");\n    }\n  },\n  updateProfile: async formData => {\n    try {\n      const response = await axios.put(`${BASE_URL}/students/me`, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      return response.data; // Return the response data\n    } catch (error) {\n      throw new Error(error.response.data.message || \"Error updating student profile\");\n    }\n  }\n};\nexport default userApi;","map":{"version":3,"names":["axios","BASE_URL","userApi","register","formData","response","post","data","error","Error","request","login","credentials","console","log","student","token","localStorage","setItem","debug","getProfile","get","message","updateProfile","put","headers"],"sources":["C:/Users/BEN/Desktop/webapp/frontend/src/API/userApi.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst BASE_URL = \"http://localhost:5000/api/v1\"; // Replace with your API base URL\r\n\r\nconst userApi = {\r\n  register: async (formData) => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${BASE_URL}/students/register`,\r\n        formData\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error.response) {\r\n        throw new Error(error.response.data.error || \"Registration failed\");\r\n      } else if (error.request) {\r\n        throw new Error(\"Network error occurred. Please try again.\");\r\n      } else {\r\n        throw new Error(\"Error occurred. Please try again.\");\r\n      }\r\n    }\r\n  },\r\n\r\n  login: async (credentials) => {\r\n    try {\r\n      const response = await axios.post(\r\n        `${BASE_URL}/students/login`,\r\n        credentials\r\n      );\r\n      console.log(\"credentials:\", credentials);\r\n      const { student, token } = response.data;\r\n      localStorage.setItem(\"token\", token);\r\n      console.debug(token);\r\n      return student; // Return the student details\r\n    } catch (error) {\r\n      throw new Error(error.response.data.error || \"Login failed\");\r\n    }\r\n  },\r\n\r\n  getProfile: async () => {\r\n    try {\r\n      const response = await axios.get(`${BASE_URL}/students/me`);\r\n      return response.data; // Return the response data\r\n    } catch (error) {\r\n      throw new Error(\r\n        error.response.data.message || \"Error fetching student profile\"\r\n      );\r\n    }\r\n  },\r\n\r\n  updateProfile: async (formData) => {\r\n    try {\r\n      const response = await axios.put(`${BASE_URL}/students/me`, formData, {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      });\r\n      return response.data; // Return the response data\r\n    } catch (error) {\r\n      throw new Error(\r\n        error.response.data.message || \"Error updating student profile\"\r\n      );\r\n    }\r\n  },\r\n};\r\n\r\nexport default userApi;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAG,8BAA8B,CAAC,CAAC;;AAEjD,MAAMC,OAAO,GAAG;EACdC,QAAQ,EAAE,MAAOC,QAAQ,IAAK;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAC9B,GAAEL,QAAS,oBAAmB,EAC/BG,QACF,CAAC;MACD,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,IAAIA,KAAK,CAACH,QAAQ,EAAE;QAClB,MAAM,IAAII,KAAK,CAACD,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACC,KAAK,IAAI,qBAAqB,CAAC;MACrE,CAAC,MAAM,IAAIA,KAAK,CAACE,OAAO,EAAE;QACxB,MAAM,IAAID,KAAK,CAAC,2CAA2C,CAAC;MAC9D,CAAC,MAAM;QACL,MAAM,IAAIA,KAAK,CAAC,mCAAmC,CAAC;MACtD;IACF;EACF,CAAC;EAEDE,KAAK,EAAE,MAAOC,WAAW,IAAK;IAC5B,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAC9B,GAAEL,QAAS,iBAAgB,EAC5BW,WACF,CAAC;MACDC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,WAAW,CAAC;MACxC,MAAM;QAAEG,OAAO;QAAEC;MAAM,CAAC,GAAGX,QAAQ,CAACE,IAAI;MACxCU,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;MACpCH,OAAO,CAACM,KAAK,CAACH,KAAK,CAAC;MACpB,OAAOD,OAAO,CAAC,CAAC;IAClB,CAAC,CAAC,OAAOP,KAAK,EAAE;MACd,MAAM,IAAIC,KAAK,CAACD,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACC,KAAK,IAAI,cAAc,CAAC;IAC9D;EACF,CAAC;EAEDY,UAAU,EAAE,MAAAA,CAAA,KAAY;IACtB,IAAI;MACF,MAAMf,QAAQ,GAAG,MAAML,KAAK,CAACqB,GAAG,CAAE,GAAEpB,QAAS,cAAa,CAAC;MAC3D,OAAOI,QAAQ,CAACE,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAM,IAAIC,KAAK,CACbD,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACe,OAAO,IAAI,gCACjC,CAAC;IACH;EACF,CAAC;EAEDC,aAAa,EAAE,MAAOnB,QAAQ,IAAK;IACjC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACwB,GAAG,CAAE,GAAEvB,QAAS,cAAa,EAAEG,QAAQ,EAAE;QACpEqB,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF,OAAOpB,QAAQ,CAACE,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAM,IAAIC,KAAK,CACbD,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACe,OAAO,IAAI,gCACjC,CAAC;IACH;EACF;AACF,CAAC;AAED,eAAepB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}